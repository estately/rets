#!/usr/bin/env ruby

require "optparse"
require "pp"

require "rubygems"

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require "rets"

class RetsCli
  def self.parse(args)

    actions = %w(metadata search count object)
    options = {:count => 5}

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename($0)} URL [options] [query]"

      opts.separator ""
      opts.separator "Authentication options:"

      opts.on("-U", "--username USERNAME", "The username to authenticate with.") do |username|
        options[:username] = username
      end

      opts.on("-P", "--password [PASSWORD]", "The password to authenticate with.","Prompts if no argument is provided.") do |password|
        options[:password] = password #or prompt # TODO
      end

      opts.on("-A", "--agent AGENT", "User-Agent header to provide.") do |agent|
        options[:agent] = agent
      end

      opts.on("-B", "--agent-password [PASSWORD]", "User-Agent password to provide.") do |ua_password|
        options[:ua_password] = ua_password
      end

      opts.separator ""
      opts.separator "Actions:"

      opts.on("-p", "--capabilities", "Print capabilities of the RETS server.") do |capabilities|
        options[:capabilities] = capabilities
      end

      opts.on("-a", "--action ACTION", actions, "Action to perform (#{actions.join(",")}).") do |action|
        options[:action] = action
      end

      opts.on("-m", "--metadata [FORMAT]", %w(tree long short), "Print metadata.", "Format is short, long or tree.", "Defaults to short.") do |format|
        options[:action] = "metadata"
        options[:metadata_format] = format || "short"
      end

      opts.separator ""
      opts.separator "Search action options:"

      opts.on("-r", "--resource NAME", "Name of resource to search for.") do |name|
        options[:resource] = name
      end

      opts.on("-c", "--class NAME", "Name of class to search for.") do |name|
        options[:class] = name
      end

      opts.on("-n", "--number LIMIT", Integer, "Return LIMIT results. Defaults to 5.") do |limit|
        options[:limit] = limit
      end

      opts.separator ""
      opts.separator "Misc options:"

      opts.on_tail("-v", "--verbose", "Be verbose.") do |verbose|
        logger = Class.new do
          def method_missing(method, *a, &b)
            puts a
          end
        end

        options[:logger] = logger.new
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      opts.on_tail("--version", "Show version") do
        puts Rets::VERSION
        exit
      end

    end

    begin
      opts.parse!(args.empty? ? ["-h"] : args)
    rescue OptionParser::InvalidArgument => e
      abort e.message
    end

    options
  end

end

options = RetsCli.parse(ARGV)
url     = ARGV[0] or abort "Need login URL"
query   = ARGV[1]

client = Rets::Client.new(options.merge(:login_url => url))

if options[:capabilities]
  pp client.capabilities
end

case options[:action]
  when "metadata" then
    metadata = client.metadata

    if options[:metadata_format] != "tree"
      preferred_fields = %w(ClassName SystemName ResourceID StandardName VisibleName MetadataEntryID KeyField)


      # All types except system
      types = Rets::METADATA_TYPES.map { |t| t.downcase.to_sym } - [:system]

      types.each do |type|
        # if RowContainer ...
        rows = metadata[type]

        puts type.to_s.capitalize
        puts "="*40

        print_key_value = lambda do |k,v|
          key   = "#{k}:".ljust(35)
          value = "#{v}".ljust(35)

          puts [key, value].join
        end

        rows.each do |row|
          top, rest = row.partition { |k,v| preferred_fields.include?(k) }

          top.each(&print_key_value)

          rest.sort_by{|k,v|k}.each(&print_key_value) if options[:metadata_format] == "long"

          puts
        end

        puts
      end

    # Tree format
    else
      metadata.print_tree
    end

  when "search" then
    pp client.find(:all,
                  :search_type => options[:resource],
                  :class       => options[:class],
                  :query       => query,
                  :count       => Rets::Client::COUNT.exclude,
                  :limit       => options[:limit])

  when "count" then
    pp client.find(:all,
              :search_type => options[:resource],
              :class       => options[:class],
              :query       => query,
              :count       => Rets::Client::COUNT.only,
              :limit       => options[:limit])

  when "object" then

    def write_objects(parts)
      parts.each do |part|
        cid = part.headers["content-id"].to_i
        oid = part.headers["object-id"].to_i

        File.open("tmp/#{cid}-#{oid}", "wb") do |f|
          puts f.path

          f.write part.body
        end
      end
    end

    parts = client.all_objects(
      :resource    => "Property",
      :resource_id => 90020062739, # id from KeyField for a given property
      :object_type => "Photo"
    )

    parts.each { |pt| p pt.headers }

    write_objects(parts)

end

client.logout
